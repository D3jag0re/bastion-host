name: Deploy TF 
on:
    push:
      branches: [doom] #Change this to trigger on push 
    workflow_dispatch: # Trigger manually from the Actions tab      

jobs:
 build_droplet:
   runs-on: ubuntu-latest
   outputs:
    b_id: ${{ steps.bastionOutputs.outputs.b_id}}
    b_ipv4: ${{ steps.bastionOutputs.outputs.b_ipv4}}
    b_name: ${{ steps.bastionOutputs.outputs.b_name}}
    p_id: ${{ steps.privateOutputs.outputs.p_id}}
    p_ipv4: ${{ steps.privateOutputs.outputs.p_ipv4}}
    p_name: ${{ steps.privateOutputs.outputs.p_name}}

   steps:
     - name: Checkout repository
       uses: actions/checkout@v4
        
     - name: Install Terraform
       uses: hashicorp/setup-terraform@v3
       with:
        terraform_version: 1.10.2
    
     - name: Set D_O S3Var
       run: |
        echo "AWS_ACCESS_KEY_ID=${{ secrets.DO_SPACES_ACCESS_KEY }}" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.DO_SPACES_SECRET_KEY }}" >> $GITHUB_ENV
       
     - name: Terraform Init
       run: terraform init
       working-directory: ./terraform
       env:
        DO_TOKEN: ${{ secrets.DO_TOKEN }}
        AWS_ACCESS_KEY_ID: ${{ secrets.DO_SPACES_ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.DO_SPACES_SECRET_KEY }}

     - name: Terraform Plan
       id: plan
       working-directory: ./terraform
       run: |
        terraform plan  \
        -input=false \
        -var "do_token=${{ secrets.DO_TOKEN }}" \
        -var "public_key=${{ secrets.DO_SSH_PUBLIC_KEY_BASTION }}" \
        -var "public_key_priv=${{secrets.DO_SSH_PUBLIC_KEY_PRIVATE}}"
       
       env:
        DO_TOKEN: ${{ secrets.DO_TOKEN }}
        AWS_ACCESS_KEY_ID: ${{ secrets.DO_SPACES_ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.DO_SPACES_SECRET_KEY }}

     - name: Terraform Apply
       id: apply
       run: |
         terraform apply -auto-approve \
          -var "do_token=${{ secrets.DO_TOKEN }}" \
          -var "public_key=${{ secrets.DO_SSH_PUBLIC_KEY_BASTION }}" \
          -var "public_key_priv=${{secrets.DO_SSH_PUBLIC_KEY_PRIVATE}}" 
       working-directory: ./terraform
       env:
        DO_TOKEN: ${{ secrets.DO_TOKEN }}
        AWS_ACCESS_KEY_ID: ${{ secrets.DO_SPACES_ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.DO_SPACES_SECRET_KEY }}
      
     - name: Get Bastion Droplet Outputs
       id: bastionOutputs
       run: |
        DROPLET_INFO=$(terraform output -json bastion_info)
        echo "b_id=$(echo $DROPLET_INFO | jq -r '.id')" >> $GITHUB_OUTPUT
        echo "b_ipv4=$(echo $DROPLET_INFO | jq -r '.ipv4')" >> $GITHUB_OUTPUT
        echo "b_name=$(echo $DROPLET_INFO | jq -r '.name')" >> $GITHUB_OUTPUT
       working-directory: ./terraform  

     - name: Get Private Droplet Outputs
       id: privateOutputs
       run: |
        DROPLET_INFO=$(terraform output -json private_info)
        echo "p_id=$(echo $DROPLET_INFO | jq -r '.id')" >> $GITHUB_OUTPUT
        echo "p_ipv4=$(echo $DROPLET_INFO | jq -r '.ipv4')" >> $GITHUB_OUTPUT
        echo "p_name=$(echo $DROPLET_INFO | jq -r '.name')" >> $GITHUB_OUTPUT
       working-directory: ./terraform         

 Transfer_Keys:
   runs-on: ubuntu-latest
   needs: build_droplet

   steps: 

    - name: Wait for 15 seconds 
      run: sleep 15

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup SSH Keys
      run: |
        # Create the SSH directory
        mkdir -p $GITHUB_WORKSPACE/.ssh
        cd $GITHUB_WORKSPACE/.ssh
        pwd

        # Write the private key into a file
        echo "${{secrets.DO_SSH_PRIVATE_KEY_PRIVATE}}" > $GITHUB_WORKSPACE/.ssh/id_rsa

        # Write the public key into a file
        echo "${{secrets.DO_SSH_PUBLIC_KEY_PRIVATE}}" > $GITHUB_WORKSPACE/.ssh/id_rsa.pub

        # Set the correct permissions
        chmod 600 $GITHUB_WORKSPACE/.ssh/id_rsa
        chmod 644 $GITHUB_WORKSPACE/.ssh/id_rsa.pub

        # Check for files 
        ls $GITHUB_WORKSPACE/.ssh/

    - name: Copy Keys to Bastion Host
      uses: burnett01/rsync-deployments@7.0.1
      with:
        switches: -avzr --delete
        path: ".ssh/"
        remote_path: /root/
        remote_host: ${{ needs.build_droplet.outputs.b_ipv4 }}
        remote_user: root
        remote_key: ${{ secrets.DO_SSH_PRIVATE_KEY_BASTION }}
